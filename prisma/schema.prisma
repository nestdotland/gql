// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name     String  @id @db.VarChar(40)
  fullName String? @db.VarChar(100)
  bioText  String?
  email    String? @unique @db.VarChar(100)

  accessTokens  AccessToken[]
  modules       Module[]
  contributions ModuleContributor[] @relation("ContributesTo")
  publications  Version[]           @relation("Publisher")
}

model Module {
  name        String   @db.VarChar(40)
  fullName    String?  @db.VarChar(100)
  description String?
  homepage    String?
  repository  String?
  issues      String?
  license     String?  @default("UNKNOWN")
  private     Boolean? @default(false)
  unlisted    Boolean? @default(false)
  ignore      String   @default(".*")
  keywords    String[]
  main        String?
  bin         String[]
  logo        String?
  lastSync    DateTime @updatedAt

  author           User                @relation(fields: [authorName], references: [name])
  authorName       String              @db.VarChar(40)
  contributors     ModuleContributor[] @relation("Contributors")
  tags             Tag[]
  versions         Version[]           @relation("Versions")
  latest           Version?            @relation(fields: [latestAuthorName, latestModuleName, latestTag], references: [authorName, moduleName, version])
  latestAuthorName String?             @db.VarChar(40)
  latestModuleName String?             @db.VarChar(40)
  latestTag        String?             @db.VarChar(40)
  hooks            Hooks?

  @@id([authorName, name])
}

model Hooks {
  presync     String?
  postsync    String?
  prepublish  String?
  postpublish String?

  module     Module @relation(fields: [authorName, moduleName], references: [authorName, name])
  authorName String @db.VarChar(40)
  moduleName String @db.VarChar(40)

  @@id([authorName, moduleName])
}

model Version {
  version       String   @db.VarChar(40)
  published     DateTime @default(now())
  deprecated    Boolean? @default(false)
  vulnerable    Boolean? @default(false)
  supportedDeno String[]
  dependencies  String[]
  main          String?
  bin           String[]
  logo          String?

  module        Module  @relation("Versions", fields: [authorName, moduleName], references: [authorName, name])
  authorName    String  @db.VarChar(40)
  moduleName    String  @db.VarChar(40)
  publisher     User    @relation("Publisher", fields: [publisherName], references: [name])
  publisherName String  @db.VarChar(40)
  tag           Tag?
  latestOf      Module?
  files         File[]

  @@id([authorName, moduleName, version])
}

model Tag {
  name String @db.VarChar(40)

  module     Module  @relation(fields: [authorName, moduleName], references: [authorName, name])
  version    Version @relation(fields: [authorName, moduleName, versionTag], references: [authorName, moduleName, version])
  authorName String  @db.VarChar(40)
  moduleName String  @db.VarChar(40)
  versionTag String  @db.VarChar(40)

  @@id([authorName, moduleName, name])
}

model File {
  name String @db.VarChar(100)
  path String
  type String @db.VarChar(100)
  hash String // TODO: set length
  txID String // TODO: set length

  version    Version @relation(fields: [authorName, moduleName, versionTag], references: [authorName, moduleName, version])
  authorName String  @db.VarChar(40)
  moduleName String  @db.VarChar(40)
  versionTag String  @db.VarChar(40)

  @@id([authorName, moduleName, versionTag, path])
}

enum Permission {
  NONE
  READ
  WRITE
  READ_WRITE
}

model AccessToken {
  name        String   @db.VarChar(40)
  tokenHash   String   @unique @db.VarChar(48)
  dateCreated DateTime @default(now())

  // Permissions
  profile              Permission @default(NONE) // WRITE only
  accessTokens         Permission @default(NONE)
  versions             Permission @default(NONE) // WRITE only
  configs              Permission @default(NONE) // WRITE only
  privateVersions      Permission @default(NONE)
  privateConfigs       Permission @default(NONE)
  privateContributions Permission @default(NONE) // READ only

  owner     User   @relation(fields: [ownerName], references: [name])
  ownerName String @db.VarChar(40)

  @@id([ownerName, name])
}

model ModuleContributor {
  // Permissions
  version      Permission @default(NONE)
  config       Permission @default(NONE)
  contributors Permission @default(NONE) // WRITE only

  contributor     User   @relation("ContributesTo", fields: [contributorName], references: [name])
  contributorName String @db.VarChar(40)
  module          Module @relation("Contributors", fields: [authorName, moduleName], references: [authorName, name])
  authorName      String @db.VarChar(40)
  moduleName      String @db.VarChar(40)

  @@id([authorName, moduleName, contributorName])
}
