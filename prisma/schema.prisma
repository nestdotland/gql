generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO: comment the schema with triple slash comments
// => description of fields and schema in the API

/// This is a user!
model User {
  // Properties
  id        String   @unique @default(uuid()) @db.Uuid // TODO(@maximousblk): remove @default() in prod
  /// This is a name!
  name      String   @db.VarChar(64)
  fullName  String?  @db.VarChar(64)
  avatar    String?
  bio       String?
  funding   String?
  tier      Tier     @default(BASIC)
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Relationships
  modules       Module[]
  publications  Version[]
  contributions Contribution[]
  accessTokens  AccessToken[]
  teams         TeamMember[]
  createdTeams  Team[]
  usageQuota    UsageQuota?

  // Primary Key
  @@id([name])
}

enum Tier {
  // these are only examples
  BASIC //  $0 • api 500   req/hr • 10mb/publish     • unlimited public modules
  PRO //    $4 • api 5000  req/hr • 100mb/publish    • unlimited public modules • unlimited private modules
  TEAMS //  $6 • api 5000  req/hr • 100mb/publish    • unlimited public modules • unlimited private modules • team management
  CUSTOM // $6 • api 10000 req/hr • $0.01/mb/publish • unlimited public modules • unlimited private modules • team management
}

model UsageQuota {
  // Foreign keys
  username String @db.VarChar(64)

  // Relationships
  user    User               @relation(fields: [username], references: [name])
  api     UsageQuotaApi?
  publish UsageQuotaPublish?

  // Primary Key
  @@id([username])
}

model UsageQuotaApi {
  // Properties
  limit         Int      @default(60)
  used          Int      @default(0)
  reset         DateTime @default(now()) // TODO(@maximousblk): remove @default() in prod
  maxComplexity Int      @default(4000)

  // Foreign keys
  username String @db.VarChar(64)

  // Relationships
  quota UsageQuota @relation(fields: [username], references: [username])

  // Primary Key
  @@id([username])
}

model UsageQuotaPublish {
  // Properties
  limit   Int      @default(20)
  used    Int      @default(0)
  size    Int      @default(200000000)
  private Boolean  @default(false)
  reset   DateTime @default(now()) // TODO(@maximousblk): remove @default() in prod

  // Foreign keys
  username String @db.VarChar(64)

  // Relationships
  quota UsageQuota @relation(fields: [username], references: [username])

  // Primary Key
  @@id([username])
}

model AccessToken {
  // Properties
  id          String   @unique @default(uuid()) @db.Uuid
  sha256      String   @db.Char(44)
  permissions String   @default("00000000000000000000000000000000") @db.Bit(32)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  // Foreign keys
  username String @db.VarChar(64)

  // Relationships
  user User @relation(fields: [username], references: [name])

  // Primary Key
  @@id([sha256])
}

model Contribution {
  // Foreign keys
  contributorName String @db.VarChar(64)
  moduleAuthor    String @db.VarChar(64)
  moduleName      String @db.VarChar(64)

  // Relationships
  contributor User   @relation(fields: [contributorName], references: [name])
  module      Module @relation(fields: [moduleAuthor, moduleName], references: [authorName, name])

  // Primary Key
  @@id([contributorName, moduleAuthor, moduleName])
}

model Module {
  // Properties
  id          String   @unique @default(uuid()) @db.Uuid
  name        String   @db.VarChar(64)
  fullName    String?  @db.VarChar(64)
  description String?
  homepage    String?
  repository  String?
  bugs        String?
  funding     String?
  license     String?  @db.VarChar(64)
  logo        String?
  keywords    String[]
  verified    Boolean  @default(false)
  malicious   Boolean  @default(false)
  private     Boolean  @default(false)
  unlisted    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  // Foreign keys
  authorName String @db.VarChar(64)

  // Relationships
  author        User            @relation(fields: [authorName], references: [name])
  teams         TeamOwnership[]
  versions      Version[]
  tags          Tag[]
  contributors  Contribution[]
  vanityName    VanityModule?
  publishConfig PublishConfig?
  devConfig     DevConfig?

  // Primary Key
  @@id([authorName, name])
}

model VanityModule {
  // Properties
  id   String @unique @default(uuid()) @db.Uuid
  name String @db.VarChar(64)

  // Foreign keys
  authorName String @db.VarChar(64)
  moduleName String @db.VarChar(64)

  // Relationships
  module Module @relation(fields: [authorName, moduleName], references: [authorName, name])

  // Primary Key
  @@id([name, authorName, moduleName])
}

model PublishConfig {
  // Properties
  main      String?
  bin       String[]
  lockfile  String?
  importMap String?
  updatedAt DateTime @default(now()) @updatedAt

  // Foreign keys
  authorName String @db.VarChar(64)
  moduleName String @db.VarChar(64)

  // Relationships
  module Module @relation(fields: [authorName, moduleName], references: [authorName, name])

  // Primary Key
  SupportedEngine SupportedEngine[]
  @@id([authorName, moduleName])
}

model DevConfig {
  // Properties
  ignore    String[]
  updatedAt DateTime @default(now()) @updatedAt

  // Foreign keys
  authorName String @db.VarChar(64)
  moduleName String @db.VarChar(64)

  // Relationships
  module Module          @relation(fields: [authorName, moduleName], references: [authorName, name])
  hooks  DevConfigHook[]

  // Primary Key
  @@id([authorName, moduleName])
}

enum HookPrefix {
  pre
  post
}

enum HookAction {
  pack
  publish
}

model DevConfigHook {
  // Properties
  id        String     @unique @default(uuid()) @db.Uuid
  prefix    HookPrefix
  action    HookAction
  run       String
  updatedAt DateTime   @default(now()) @updatedAt

  // Foreign keys
  authorName String @db.VarChar(64)
  moduleName String @db.VarChar(64)

  // Relationships
  config DevConfig @relation(fields: [authorName, moduleName], references: [authorName, moduleName])

  // Primary Key
  @@id([authorName, moduleName, prefix, action])
  @@map("Hook")
}

model Version {
  // Properties
  id            String   @unique @default(uuid()) @db.Uuid
  name          String   @db.VarChar(64)
  publisherName String   @db.VarChar(64)
  deprecated    Boolean  @default(false)
  vulnerable    Boolean  @default(false)
  unlisted      Boolean  @default(false)
  main          String?
  bin           String[]
  lockfile      String?
  importMap     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  // Foreign keys
  authorName String @db.VarChar(64)
  moduleName String @db.VarChar(64)

  // Relationships
  module                 Module                      @relation(fields: [authorName, moduleName], references: [authorName, name])
  publisher              User                        @relation(fields: [publisherName], references: [name])
  files                  File[]
  tags                   Tag[]
  dependents             DependencyGraph[]           @relation("rDependentToDependency")
  dependencies           DependencyGraph[]           @relation("rDependencyToDependent")
  taggedDependencies     TaggedDependencyGraph[]
  thirdPartyDependencies ThirdPartyDependencyGraph[]
  engines                SupportedEngine[]

  // Primary Key
  @@id([authorName, moduleName, name])
}

model Engine {
  // Properties
  id       String @unique @default(uuid()) @db.Uuid
  platform String @db.VarChar(64)
  range    String @db.VarChar(64)

  // relationships
  support SupportedEngine[]

  // Primary Key
  @@id([platform, range])
}

model SupportedEngine {
  // Foreign keys
  authorName  String @db.VarChar(64)
  moduleName  String @db.VarChar(64)
  versionName String @db.VarChar(64)
  platform    String @db.VarChar(64)
  range       String @db.VarChar(64)

  // Relationships
  engine  Engine        @relation(fields: [platform, range], references: [platform, range])
  version Version       @relation(fields: [authorName, moduleName, versionName], references: [authorName, moduleName, name])
  config  PublishConfig @relation(fields: [authorName, moduleName], references: [authorName, moduleName])

  // Primary Key
  @@id([authorName, moduleName, versionName, platform, range])
}

model Tag {
  // Properties
  id        String   @unique @default(uuid()) @db.Uuid
  name      String   @db.VarChar(64)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Foreign keys
  authorName  String @db.VarChar(64)
  moduleName  String @db.VarChar(64)
  versionName String @db.VarChar(64)

  // Relationships
  module     Module                  @relation(fields: [authorName, moduleName], references: [authorName, name])
  version    Version                 @relation(fields: [authorName, moduleName, versionName], references: [authorName, moduleName, name])
  dependents TaggedDependencyGraph[]

  // Primary Key
  @@id([authorName, moduleName, name])
}

model DependencyGraph {
  // Foreign keys
  dependentAuthor   String @db.VarChar(64)
  dependentName     String @db.VarChar(64)
  dependentVersion  String @db.VarChar(64)
  dependencyAuthor  String @db.VarChar(64)
  dependencyName    String @db.VarChar(64)
  dependencyVersion String @db.VarChar(64)

  // Relationships
  dependent  Version @relation("rDependencyToDependent", fields: [dependentAuthor, dependentName, dependentVersion], references: [authorName, moduleName, name])
  dependency Version @relation("rDependentToDependency", fields: [dependencyAuthor, dependencyName, dependencyVersion], references: [authorName, moduleName, name])

  // Primary Key
  @@id([dependentAuthor, dependentName, dependentVersion, dependencyAuthor, dependencyName, dependencyVersion])
}

model TaggedDependencyGraph {
  // Foreign keys
  dependentAuthor  String @db.VarChar(64)
  dependentName    String @db.VarChar(64)
  dependentVersion String @db.VarChar(64)
  dependencyAuthor String @db.VarChar(64)
  dependencyName   String @db.VarChar(64)
  dependencyTag    String @db.VarChar(64)

  // Relationships
  dependent  Version @relation(fields: [dependentAuthor, dependentName, dependentVersion], references: [authorName, moduleName, name])
  dependency Tag     @relation(fields: [dependencyAuthor, dependencyName, dependencyTag], references: [authorName, moduleName, name])

  // Primary Key
  @@id([dependentAuthor, dependentName, dependentVersion, dependencyAuthor, dependencyName, dependencyTag])
}

model ThirdPartyModule {
  // Properties
  id   String @unique @default(uuid()) @db.Uuid
  path String

  // Foreign keys
  hostname String

  // Relationships
  host       ThirdPartyHost              @relation(fields: [hostname], references: [hostname])
  dependents ThirdPartyDependencyGraph[]

  // Primary Key
  @@id([path, hostname])
}

model ThirdPartyHost {
  // Properties
  id       String  @unique @default(uuid()) @db.Uuid
  hostname String
  verified Boolean @default(false)

  // Relationships
  modules ThirdPartyModule[]

  // Primary Key
  @@id([hostname])
}

model ThirdPartyDependencyGraph {
  // Foreign keys
  dependentAuthor  String @db.VarChar(64)
  dependentName    String @db.VarChar(64)
  dependentVersion String @db.VarChar(64)
  dependencyHost   String
  dependencyPath   String

  // Relationships
  dependent  Version          @relation(fields: [dependentAuthor, dependentName, dependentVersion], references: [authorName, moduleName, name])
  dependency ThirdPartyModule @relation(fields: [dependencyHost, dependencyPath], references: [hostname, path])

  // Primary Key
  @@id([dependentAuthor, dependentName, dependentVersion, dependencyHost, dependencyPath])
}

model File {
  // Properties
  id        String   @unique @default(uuid()) @db.Uuid
  path      String
  url       String
  size      Int
  mimeType  String?  @db.VarChar(64)
  createdAt DateTime @default(now())

  // Foreign keys
  authorName  String @db.VarChar(64)
  moduleName  String @db.VarChar(64)
  versionName String @db.VarChar(64)

  // Relationships
  version Version @relation(fields: [authorName, moduleName, versionName], references: [authorName, moduleName, name])

  // Primary Key
  @@id([authorName, moduleName, versionName, path])
}

/// TEAM
model Team {
  // Properties
  id        String   @unique @default(uuid()) @db.Uuid
  name      String   @db.VarChar(64)
  createdAt DateTime
  updatedAt DateTime

  // Foreign keys
  ownerName String @db.VarChar(64)

  // Relationships
  members TeamMember[]
  owner   User            @relation(fields: [ownerName], references: [name])
  modules TeamOwnership[]

  // Primary Key
  @@id([ownerName, name])
}

model TeamOwnership {
  // Foreign keys
  teamName     String @db.VarChar(64)
  teamOwner    String @db.VarChar(64)
  moduleAuthor String @db.VarChar(64)
  moduleName   String @db.VarChar(64)

  // Relationships
  team   Team   @relation(fields: [teamOwner, teamName], references: [ownerName, name])
  module Module @relation(fields: [moduleAuthor, moduleName], references: [authorName, name])

  @@id([teamOwner, teamName, moduleAuthor, moduleName])
}

model TeamMember {
  // Properties
  memberName  String @map("name") @db.VarChar(64)
  teamOwner   String @db.VarChar(64)
  teamName    String @db.VarChar(64)
  permissions String @default("00000000000000000000000000000000") @db.Bit(32)

  // Relationships
  team Team @relation(fields: [teamOwner, teamName], references: [ownerName, name])
  user User @relation(fields: [memberName], references: [name])

  // Primary Key
  @@id([memberName, teamOwner, teamName])
}
