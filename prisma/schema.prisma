generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // Properties
  id        String   @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid // TODO(@maximousblk): remove @default() in prod
  username  String   @db.VarChar(64)
  name      String?  @db.VarChar(64)
  avatar    String?
  bio       String?
  funding   String?
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Relationships
  modules       Module[]       @relation("rModuleToAuthor")
  publications  Version[]      @relation("rVersionToUser")
  contributions Contribution[] @relation("rContributionToUser")
  usageQuota    UsageQuota?    @relation("rUsageQuotaToUser")
  accessTokens  AccessToken[]  @relation("rAccessTokensToUser")

  // Primary Key
  @@id([username])
}

model Module {
  // Properties
  id          String   @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  authorName  String   @db.VarChar(64)
  name        String   @db.VarChar(64) // inconsistent with User
  fullName    String?  @db.VarChar(64)
  description String?
  homepage    String?
  repository  String?
  bugs        String?
  funding     String?
  license     String?  @db.VarChar(64)
  logo        String?
  keywords    String[]
  verified    Boolean  @default(false)
  malicious   Boolean  @default(false)
  private     Boolean  @default(false)
  unlisted    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  // Relationships
  versions      Version[]      @relation("rVersionToModule")
  contributors  Contribution[] @relation("rContributionToModule")
  author        User           @relation("rModuleToAuthor", fields: [authorName], references: [username])
  tags          Tag[]          @relation("rTagToModule")
  publishConfig PublishConfig? @relation("rPublishConfigToModule")
  devConfig     DevConfig?     @relation("rDevConfigToModule")

  // Primary Key
  @@id([authorName, name])
}

model Version {
  // Properties
  id            String   @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  authorName    String   @db.VarChar(64)
  moduleName    String   @db.VarChar(64)
  name          String   @db.VarChar(64)
  publisherName String   @db.VarChar(64)
  deprecated    Boolean  @default(false)
  vulnerable    Boolean  @default(false)
  unlisted      Boolean  @default(false)
  supportedDeno String[] // probably be replaced by an `engines` object
  main          String?
  bin           String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  // Relationships
  files                  File[]                      @relation("rFileToVersion")
  tag                    Tag[]                       @relation("rTagToVersion")
  module                 Module                      @relation("rVersionToModule", fields: [authorName, moduleName], references: [authorName, name])
  publisher              User                        @relation("rVersionToUser", fields: [publisherName], references: [username])
  dependents             DependencyGraph[]           @relation("rDependentToDependency")
  dependencies           DependencyGraph[]           @relation("rDependencyToDependent")
  taggedDependencies     TaggedDependencyGraph[]     @relation("rTaggedDependencyToDependent")
  thirdPartyDependencies ThirdPartyDependencyGraph[] @relation("rVersionToThirdPartyDependency")

  // Primary Key
  @@id([authorName, moduleName, name])
}

model Tag {
  // Properties
  id          String   @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  authorName  String   @db.VarChar(64)
  moduleName  String   @db.VarChar(64)
  name        String   @db.VarChar(64)
  versionName String   @db.VarChar(64)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt


  // Relationships
  module     Module                  @relation("rTagToModule", fields: [authorName, moduleName], references: [authorName, name])
  version    Version                 @relation("rTagToVersion", fields: [authorName, moduleName, versionName], references: [authorName, moduleName, name])
  dependents TaggedDependencyGraph[] @relation("rTaggedDependentToDependency")

  // Primary Key
  @@id([authorName, moduleName, name])
}

model File {
  // Properties
  id          String   @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  authorName  String   @db.VarChar(64)
  moduleName  String   @db.VarChar(64)
  versionName String   @db.VarChar(64)
  path        String
  url         String
  mimeType    String?  @db.VarChar(64)
  createdAt   DateTime @default(now())

  // Relationships
  version Version @relation("rFileToVersion", fields: [authorName, moduleName, versionName], references: [authorName, moduleName, name])

  // Primary Key
  @@id([authorName, moduleName, versionName, path])
}

model PublishConfig {
  // Properties
  id         String   @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  authorName String   @db.VarChar(64)
  moduleName String   @db.VarChar(64)
  main       String?
  bin        String[]
  lockfile   String? // absent from Version
  importMap  String? // absent from Version
  updatedAt  DateTime @default(now()) @updatedAt

  // Relationships
  module Module @relation("rPublishConfigToModule", fields: [authorName, moduleName], references: [authorName, name])

  // Primary Key
  @@id([authorName, moduleName])
}

model DevConfig {
  // Properties
  id         String   @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  authorName String   @db.VarChar(64)
  moduleName String   @db.VarChar(64)
  ignore     String[]
  updatedAt  DateTime @default(now()) @updatedAt

  // Relationships
  module Module          @relation("rDevConfigToModule", fields: [authorName, moduleName], references: [authorName, name])
  hooks  DevConfigHook[] @relation("rDevConfigToHooks")

  // Primary Key
  @@id([authorName, moduleName])
}

enum HookMode {
  pre
  post
}

enum HookKey {
  pack
  publish
}

model DevConfigHook {
  // Properties
  id         String   @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  authorName String   @db.VarChar(64)
  moduleName String   @db.VarChar(64)
  key        HookKey
  mode       HookMode
  value      String
  updatedAt  DateTime @default(now()) @updatedAt

  // Relationships
  config DevConfig @relation("rDevConfigToHooks", fields: [authorName, moduleName], references: [authorName, moduleName])

  // Primary Key
  @@id([authorName, moduleName, key])
  @@map("Hooks")
}

model UsageQuota {
  // Properties
  id       String @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  username String @db.VarChar(64)

  // Relationships
  user    User               @relation("rUsageQuotaToUser", fields: [username], references: [username])
  api     UsageQuotaApi?     @relation("rUsageQuotaToUsageQuotaApi")
  publish UsageQuotaPublish? @relation("rUsageQuotaToUsageQuotaPublish")

  // Primary Key
  @@id([username])
}

model UsageQuotaApi {
  // Properties
  id        String   @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  username  String   @db.VarChar(64)
  limit     Int      @default(60)
  used      Int      @default(0)
  remaining Int      @default(60)
  reset     DateTime @default(now()) // TODO(@maximousblk): remove @default() in prod

  // Relationships
  quota UsageQuota @relation("rUsageQuotaToUsageQuotaApi", fields: [username], references: [username])

  // Primary Key
  @@id([username])
}

model UsageQuotaPublish {
  // Properties
  id        String   @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  username  String   @db.VarChar(64)
  limit     Int      @default(20)
  used      Int      @default(0)
  remaining Int      @default(20)
  size      Int      @default(200000000)
  private   Boolean  @default(false)
  reset     DateTime @default(now()) // TODO(@maximousblk): remove @default() in prod

  // Relationships
  quota UsageQuota @relation("rUsageQuotaToUsageQuotaPublish", fields: [username], references: [username])

  // Primary Key
  @@id([username])
}

model DependencyGraph {
  // Properties
  id                String @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  dependentAuthor   String @db.VarChar(64)
  dependentName     String @db.VarChar(64)
  dependentVersion  String @db.VarChar(64)
  dependencyAuthor  String @db.VarChar(64)
  dependencyName    String @db.VarChar(64)
  dependencyVersion String @db.VarChar(64)

  // Relationships
  dependent  Version @relation("rDependencyToDependent", fields: [dependentAuthor, dependentName, dependentVersion], references: [authorName, moduleName, name])
  dependency Version @relation("rDependentToDependency", fields: [dependencyAuthor, dependencyName, dependencyVersion], references: [authorName, moduleName, name])

  // Primary Key
  @@id([dependentAuthor, dependentName, dependentVersion, dependencyAuthor, dependencyName, dependencyVersion])
}

model TaggedDependencyGraph {
  // Properties
  id               String @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  dependentAuthor  String @db.VarChar(64)
  dependentName    String @db.VarChar(64)
  dependentVersion String @db.VarChar(64)
  dependencyAuthor String @db.VarChar(64)
  dependencyName   String @db.VarChar(64)
  dependencyTag    String @db.VarChar(64)

  // Relationships
  dependent  Version @relation("rTaggedDependencyToDependent", fields: [dependentAuthor, dependentName, dependentVersion], references: [authorName, moduleName, name])
  dependency Tag     @relation("rTaggedDependentToDependency", fields: [dependencyAuthor, dependencyName, dependencyTag], references: [authorName, moduleName, name])

  // Primary Key
  @@id([dependentAuthor, dependentName, dependentVersion, dependencyAuthor, dependencyName, dependencyTag])
}

model ThirdPartyModule {
  // Properties
  id       String @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  hostname String
  path     String

  // Relationships
  host       ThirdPartyHost              @relation("rThirdPartyModuleToThirdPartyHost", fields: [hostname], references: [hostname])
  dependents ThirdPartyDependencyGraph[] @relation("rThirdPartyModuleToThirdPartyDependency")

  // Primary Key
  @@id([path, hostname])
}

model ThirdPartyHost {
  // Properties
  id       String  @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  hostname String
  verified Boolean @default(false)

  // Relationships
  modules ThirdPartyModule[] @relation("rThirdPartyModuleToThirdPartyHost")

  // Primary Key
  @@id([hostname])
}

model ThirdPartyDependencyGraph {
  // Properties
  id               String @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  dependentAuthor  String @db.VarChar(64)
  dependentName    String @db.VarChar(64)
  dependentVersion String @db.VarChar(64)
  dependencyHost   String
  dependencyPath   String

  // Relationships
  dependent  Version          @relation("rVersionToThirdPartyDependency", fields: [dependentAuthor, dependentName, dependentVersion], references: [authorName, moduleName, name])
  dependency ThirdPartyModule @relation("rThirdPartyModuleToThirdPartyDependency", fields: [dependencyHost, dependencyPath], references: [hostname, path])

  // Primary Key
  @@id([dependentAuthor, dependentName, dependentVersion, dependencyHost, dependencyPath])
}

model Contribution {
  // Properties
  id              String @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  contributorName String @db.VarChar(64)
  moduleAuthor    String @db.VarChar(64)
  moduleName      String @db.VarChar(64)

  // Relationships
  contributor User   @relation("rContributionToUser", fields: [contributorName], references: [username])
  module      Module @relation("rContributionToModule", fields: [moduleAuthor, moduleName], references: [authorName, name])

  // Primary Key
  @@id([contributorName, moduleAuthor, moduleName])
}

// enum Permission {
//   USER_READ
//   USER_WRITE
//   MODULE_READ
//   MODULE_WRITE
//   MODULE_PUBLISH
//   PRIVATE_MODULE_READ
//   PRIVATE_MODULE_WRITE
//   PRIVATE_MODULE_PUBLISH
// }

model AccessToken {
  // Properties
  id          String   @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  username    String   @db.VarChar(64)
  sha256      String   @db.Char(64)
  permissions String   @db.Bit(16) @default("0000000000000000")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  // Relationships
  user User @relation("rAccessTokensToUser", fields: [username], references: [username])

  // Primary Key
  @@id([sha256])
  @@map("AccessTokens")
}
